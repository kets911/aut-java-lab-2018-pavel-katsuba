package com.epam.lab.pavel_katsuba.vneklasniki.filters;

import com.epam.lab.pavel_katsuba.vneklasniki.Constants;
import com.epam.lab.pavel_katsuba.vneklasniki.beans.Service;
import com.epam.lab.pavel_katsuba.vneklasniki.beans.ServiceAccessRelate;
import com.epam.lab.pavel_katsuba.vneklasniki.dao_impl.AccessDao;
import com.epam.lab.pavel_katsuba.vneklasniki.dao_impl.ServiceAccessDao;
import com.epam.lab.pavel_katsuba.vneklasniki.dao_impl.ServiceDao;
import com.epam.lab.pavel_katsuba.vneklasniki.db_utils.MySqlDBManager;
import com.epam.lab.pavel_katsuba.vneklasniki.interfaces.VneklasnikiDao;
import com.epam.lab.pavel_katsuba.vneklasniki.uti.TokenConverter;
import com.sun.jersey.spi.container.ContainerRequest;
import com.sun.jersey.spi.container.ContainerRequestFilter;
import com.sun.jersey.spi.container.ContainerResponse;
import com.sun.jersey.spi.container.ContainerResponseFilter;
import lombok.SneakyThrows;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class AuthFilter implements ContainerRequestFilter, ContainerResponseFilter {
    private VneklasnikiDao<Service> serviceDao = new ServiceDao(MySqlDBManager.instance());
    private VneklasnikiDao<String> accessDao = new AccessDao(MySqlDBManager.instance());
    private VneklasnikiDao<ServiceAccessRelate> relateDao = new ServiceAccessDao(MySqlDBManager.instance());
    @Context
    private HttpServletRequest httpRequest;
    @Context
    private HttpServletResponse httpResponse;

    @Override
    @SneakyThrows
    public ContainerRequest filter(ContainerRequest containerRequest) {
        List<String> splitPath = Arrays.asList(httpRequest.getPathInfo().split("/"));
        System.out.println("Path ->" + splitPath);
        if (splitPath.contains("registration") && "POST".equals(httpRequest.getMethod())){
//            filterChain.doFilter(servletRequest, servletResponse);
            return containerRequest;
        }
        String token;
        if ("start".equals(httpRequest.getPathInfo())) {
            token = (String) httpRequest.getSession().getAttribute("token");
        } else token = httpRequest.getHeader("token");

        HttpSession session = httpRequest.getSession();
        String some = (String) session.getAttribute("some");
        System.out.println("Session  have -> " + some);
        session.setAttribute("some", "my info");

        System.out.println("token -> " + token);
        if (token == null) {
            httpResponse.setStatus(401);
            httpRequest.getRequestDispatcher("/info.jsp").forward(httpRequest, httpResponse);
            return containerRequest;
        }
//       token decryption

        String[] splitToken = TokenConverter.getArrToken(token);
        Service service = new Service(splitToken[0], splitToken[1]);

        if (isAdmin(service) && splitPath.contains("info")) {
//            filterChain.doFilter(servletRequest, servletResponse);
            return containerRequest;
        }

        LocalDateTime tokenCreation = LocalDateTime.parse(splitToken[2]);
        LocalDateTime now = LocalDateTime.now();
        long between = ChronoUnit.MINUTES.between(tokenCreation, now);

        System.out.println(between);
        if (between > 10) {
            httpResponse.setStatus(307);
            httpRequest.getRequestDispatcher("/info.jsp").forward(httpRequest, httpResponse);
            return containerRequest;
        }

        int serviceId = serviceDao.getEntityId(service);
        if (serviceId == Constants.NAN_ID) {
            httpResponse.setStatus(500);
            httpRequest.getRequestDispatcher("/info.jsp").forward(httpRequest, httpResponse);
            return containerRequest;
        }
        service = serviceDao.getEntity(serviceId);
        List<String> accesses = new ArrayList<>();
        for (ServiceAccessRelate relate : relateDao.getAllEntities()) {
            if (relate.getServiceId() == serviceId) {
                accesses.add(relate.getAccess());
            }
        }
        service.setAccess(accesses);

        System.out.println(service);
//        ^ token decryption
        List<String> access = service.getAccess();
        for (String string : splitPath) {
            if (access.contains(string)) {
                service.setRequestCount(service.getRequestCount() - 1);
                boolean isChanged = serviceDao.putEntity(serviceId, service);
                if (isChanged) {
//                    filterChain.doFilter(servletRequest, servletResponse);
                    return containerRequest;
                }
            }
        }
        httpResponse.setStatus(403);
        httpRequest.getRequestDispatcher("/info.jsp").forward(httpRequest, httpResponse);
        return containerRequest;
    }

    private boolean isAdmin(Service service) {
        String login = service.getLogin().toLowerCase();
        String pass = service.getPassword().toLowerCase();
        return "admin".equals(login) && "password".equals(pass);
    }


    @Override
    public ContainerResponse filter(ContainerRequest containerRequest, ContainerResponse containerResponse) {
        return containerResponse;
    }
}
